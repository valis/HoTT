test0 : Nat -> Nat
test0 x = x

test1 : (0 = 0 -> Nat) -> Nat
test1 = let x = 0 in \f -> f (idp x)

test2 : (0 = 0 -> Nat) -> Nat
test2 f = let x = 0 in f (idp x)

test3 : (let x = 0 in x) = 0
test3 = idp 0

test4 : (x : Type0) -> x -> x
test4 x = \y -> y

test4' : (x : Type0) -> x -> Type0
test4' x = \y -> x

test5 : (x : Type0) -> x -> x
test5 x y = let x = 0 in y

test6 : (x : Type0) -> x -> ((x -> x) -> x) -> x
test6 x y f = f (let x = 0 in \z -> y)

test7'fail : (x : Type0) -> x -> ((x -> x) -> x) -> x
test7'fail x y f = f (let x = 0 in \z -> x)

test8'fail : (x : Type0) -> x -> ((x -> x) -> x) -> x
test8'fail x y f = f (\z -> x)

test9'fail : (x : Type0) -> x -> ((x -> x) -> x) -> x
test9'fail x y f = f (let y = 0 in \z -> y)
