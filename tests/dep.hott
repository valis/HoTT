depTest : (A : Type) (B : A -> Type) (f : (a : A) -> B a) -> f = f
depTest A B f = idp f

coeTest1 : (A : Type) -> A -> A
coeTest1 A = coe (idp A)

coeTest2 : (A : Type) -> coeTest1 A = (\a -> a)
coeTest2 A = idp (\a -> a)

transport : (A : Type) (B : A -> Type) (a a' : A) -> a = a' -> B a -> B a'
transport A B a a' p = coe (pmap (idp B) p)

-- pmap (idp (\e -> B a (proj1 e) (proj2 e))) (ext (p, idp p))

contrPathSpace : (A : Type) (a a' : A) (p : a = a') -> ((a, idp a) :: (a' : A) * a = a') = (a', p)
contrPathSpace A a a' p = ext (p, idp p)

J : (A : Type) (B : (a a' : A) -> a = a' -> Type) -> ((a : A) -> B a a (idp a)) -> (a a' : A) (p : a = a') -> B a a' p
J A B d a a' p =
    transport ((x : A) * a = x) (\e -> B a (proj1 e) (proj2 e)) (a, idp a) (a', p) (contrPathSpace A a a' p) (d a)

J'fail : (A : Type) (B : (a a' : A) -> a = a' -> Type) -> (a a' : A) (p : a = a') -> B a a (idp a) = B a a' p
J'fail A B a a' p = pmap (pmap (idp (B a)) p) (idp p)
                    -- B a <$> p <*> idp p
                    -- [B (idp a) p (idp p)]

-- J' : (A : Type) (B : (a a' : A) -> a = a' -> Type) -> (a a' : A) (p : a = a') -> B a a (comp p (inv p)) = B a a' p
-- J' A B a a' p = pmap (pmap (idp (B a)) p) (idp p)

-- J1 : (A : Type) (B : (a a' : A) -> a = a' -> Type) -> (a a' : A) (p : a = a') -> B a a (idp a) = B a a' p
-- J1 A B a a' p = inv (pmap (pmap (idp (B a)) (inv p)) (idp p))

-- J'' : (A : Type) (B : (a a' : A) -> a = a' -> Type) -> ((a : A) -> B a a (idp a)) -> (a a' : A) (p : a = a') -> B a a' p
-- J'' A B d a a' p = coe (pmap (pmap (idp (B a)) p) (idp p)) (d a)

-- pmap (idp (B a)) p : Id (a = a' -> Type) (\x -> B a a (x; inv p)) (B a a')
-- pmap (pmap (idp B a) p) (idp p) : Id Type (B a a (p; inv p)) (B a a' p)
-- coe (pmap (pmap (idp B a) p) (idp p)) : B a a (p; inv p) -> B a a' p

-- depmap : (A : Type) (B : A -> Type) (f : (a : A) -> B a) (a a' : A) (p : a = a') -> transport A B a a' p (f a) = f a'
-- depmap A B f a a' p = 

invIdpTest1 : (A : Type) (a a' : A) (p : a = a') -> comp (inv p) p = idp a'
invIdpTest1 A = J A (\a a' p -> comp (inv p) p = idp a') (\a -> idp (idp a))

invIdpTest2 : (A : Type) (a a' : A) (p : a = a') -> comp p (inv p) = idp a
invIdpTest2 A = J A (\a a' p -> comp p (inv p) = idp a) (\a -> idp (idp a))

invIdpTest3 : (A : Type) (a a' : A) (p : a = a') -> idp a' = comp (inv p) p
invIdpTest3 A = J A (\a a' p -> idp a' = comp (inv p) p) (\a -> idp (idp a))

invIdpTest4 : (A : Type) (a a' : A) (p : a = a') -> idp a = comp p (inv p)
invIdpTest4 A = J A (\a a' p -> idp a = comp p (inv p)) (\a -> idp (idp a))

depmap : (A : Type) (B : A -> Type) (f : (a : A) -> B a) (a a' : A) (p : a = a') -> transport A B a a' p (f a) = f a'
depmap A B f a a' = pmap (idp f)
