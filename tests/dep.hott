pmap : (A B : Type) (f : A -> B) (a a' : A) -> a = a' -> f a = f a'
pmap _ _ f _ _ = idp f

-- deptrans : (A : Type) (B : A -> Type0) (a a' : A) -> a = a' -> B a -> B a'
-- deptrans A B a a' p = trans (pmap A Type0 B a a' p)

depTest : (A : Type) (B : A -> Type) (f : (a : A) -> B a) -> f = f
depTest A B f = idp f

transport : (A : Type) (B : A -> Type) (a a' : A) -> a = a' -> B a -> B a'
transport A B a a' p = trans (idp B p)

{-
contrPathSpace : (A : Type) (a a' : A) (p : a = a') -> (a, idp a) = (a', p)
contrPathSpace A a a' p = (p, idp p)

J : (A : Type) (B : (a a' : A) -> a = a' -> Type) -> ((a : A) -> B a a (idp a)) -> (a a' : A) (p : a = a') -> B a a' p
J A B d a a' p =
    transport ((x : A) * a = x) (\e -> B a (proj1 e) (proj2 e)) (a, idp a) (a', p) (contrPathSpace A a a' p) (d a)
-}

-- depmap : (A : Type) (B : A -> Type) (f : (a : A) -> B a) (a a' : A) (p : a = a') -> transport A B a a' p (f a) = f a'
-- depmap A B f a a' p = 

depmap'fail : (A : Type) (B : A -> Type) (f : (a : A) -> B a) (a a' : A) (p : a = a') -> transport A B a a' p (f a) = f a'
depmap'fail A B f a a' = idp f
