depTest : (A : Type) (B : A -> Type) (f : (a : A) -> B a) -> f = f
depTest A B f = idp f

coeTest1 : (A : Type) -> A -> A
coeTest1 A = coe (idp A)

coeTest2 : (A : Type) -> coeTest1 A = (\a -> a)
coeTest2 A = idp (\a -> a)

transport : (A : Type) (B : A -> Type) (a a' : A) -> a = a' -> B a -> B a'
transport A B a a' p = coe (pmap (idp B) p)

contrPathSpace : (A : Type) (a a' : A) (p : a = a') -> ((a, idp a) :: (a' : A) * a = a') = (a', p)
contrPathSpace A a a' p = ext (p, idp p)

J : (A : Type) (B : (a a' : A) -> a = a' -> Type) -> ((a : A) -> B a a (idp a)) -> (a a' : A) (p : a = a') -> B a a' p
J A B d a a' p =
    transport ((x : A) * a = x) (\e -> B a (proj1 e) (proj2 e)) (a, idp a) (a', p) (contrPathSpace A a a' p) (d a)

J' : (A : Type) (B : (a a' : A) -> a = a' -> Type) -> ((a : A) -> B a a (idp a)) -> (a a' : A) (p : a = a') -> B a a' p
J' A B d a a' p = coe (pmap (pmap (idp (B a)) p) (idp p)) (d a)

-- pmap (idp B a) p : Id (a = a' -> Type) (\x -> B a a (x; inv p)) (B a a')
-- pmap (pmap (idp B a) p) (idp p) : Id Type (B a a (p; inv p)) (B a a' p)
-- coe (pmap (pmap (idp B a) p) (idp p)) : B a a (p; inv p) -> B a a' p

-- depmap : (A : Type) (B : A -> Type) (f : (a : A) -> B a) (a a' : A) (p : a = a') -> transport A B a a' p (f a) = f a'
-- depmap A B f a a' p = 

depmap'fail : (A : Type) (B : A -> Type) (f : (a : A) -> B a) (a a' : A) (p : a = a') -> transport A B a a' p (f a) = f a'
depmap'fail A B f a a' = pmap (idp f)
