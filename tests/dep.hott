depTest : (A : Type) (B : A -> Type) (f : (a : A) -> B a) -> f = f | ((a : A) -> B a)
depTest A B f = idp f

coeTest1 : (A : Type) -> A -> A
coeTest1 A = coe (idp A)

coeTest2 : (A : Type) -> coeTest1 A = (\a -> a) | (A -> A)
coeTest2 A = idp (\a -> a)

transport : (A : Type) (B : A -> Type) (a a' : A) -> a = a' | A -> B a -> B a'
transport A B a a' p = coe (idp B <*> p)

-- pmap : {A : Type} {B : A -> Type} (f : (a : A) -> B a) {a a' : A} (p : a = a') -> Id (B a') (trans B p (f a)) (f a')
-- pmap : {A : Type} {B : A -> Type} (f : (a : A) -> B a) {a a' : A} (p : a = a') -> f a = f a' | B, p
-- A : Type, a : A, a' : A, p : a = a', B : A -> Type, b : B a, b' : B a' |- b = b' | B, p : Type
-- (f = f' | (\a -> B -> C), p) => Id (B[a'] -> C[a']) (\x -> trans (\a -> C) p (f (trans (\a -> B) (inv p) x))) f'
-- (f = f' | (\a -> B -> C), p) => Id (B[a] -> C[a']) (\x -> trans (\a -> C) p (f x)) (\x -> f' (trans (\a -> B) p x))
-- (f = f' | (\a -> (b : B) -> C b), p) =>
--   Id ((b : B[a]) -> C[a'] (trans (\a -> B) p b))
--      (\(b : B[a]) -> trans (\a -> C b) p (f b)) -- ?
--      (\(b : B[a]) -> f' (trans (\a -> B) p b))

-- B : (a a' : A) -> a = a' -> Type
-- B' : A -> (a : A) * (A -> (a' : A) * (a = a' -> Type))
-- proj2 (B' a) : A -> (a' : A) * (a = a' -> Type)
-- proj2 (B' a) <$> p : Id ((a' : A) * (a = a' -> Type)) (proj2 (B' a) a) (proj2 (B' a) a')

-- idp (\e -> B a (proj1 e) (proj2 e)) <*> (ext (p, idp p))
-- (\e -> B a (proj1 e) (proj2 e)) : (a' : A) * a = a' -> Type
-- (e = ext (p, idp p)) |- B a <$> proj1 e <*> proj2 e : B a a (idp a) = B a a' p
-- (e = ext (p, idp p)) |- B a <$> proj1 e <*> proj2 e : B a a (comp p (inv p)) = B a a' p
--                      |- B a <$> p       <*> idp p   : B a a (comp p (inv p)) = B a a' p

-- f : (a : A) -> B a
-- p : a = a'
-- f <$> p : coe (B <$> p) (f a) = f a'

-- f : (a : A) (b : B a) -> C a b
-- p : a = a'
-- f <$> p : Id ((b : B a') -> C a' b) (coe ((\a -> (b : B a) -> C a b) <$> p) (f a)) (f a')
-- q : Id (B a') b b'
-- f <$> p <*> q : coe (B <$> p)

-- (\e -> B a (proj1 e) (proj2 e)) <$> (ext (p, idp p)) : (idp a = idp a) = (p = p)
-- (\(a' : A) (q : a = a') -> B a a' q) <$> p <*> idp p
-- (\(a' : A) (q : a = a') -> B a a' q) <$> p : B a a = B a a' | (\a' -> a = a' -> Type) <$> p
-- (\(a' : A) (q : a = a') -> B a a' q) <$> p : B a a = B a a' |
--   iso (a = a -> Type) (a = a' -> Type) (\f q -> f (q; inv p)) (\f q -> f (q; p)) _ _
-- (\(a' : A) (q : a = a') -> B a a' q) <$> p : B a a = B a a' | (\a' -> a = a' -> Type), p

-- (\(a' : A) (q : a = a') -> Id (a = a') q q) <$> p <*> idp p
-- (\e -> Id (a = proj1 e) (proj2 e) (proj2 e)) <$> (ext (p, idp p)) : (idp a = idp a) = (p = p)

-- idp (B a) <*> p : transport (\a' -> a = a' -> Type) along p $ Id (a = a' -> Type) (\x -> B a a (x; inv p)) (B a a')
-- idp (B a) <*> p <*> idp p : Id Type (B a a (p; inv p)) (B a a' p)
-- coe (idp (B a) <*> p <*> idp p) : B a a (p; inv p) -> B a a' p

{-
contrPathSpace : (A : Type) (a a' : A) (p : a = a') -> (a, idp a) = (a', p) | ((a' : A) * a = a')
contrPathSpace A a a' p = ext (p, idp p)

J : (A : Type) (B : (a a' : A) -> a = a' -> Type) -> ((a : A) -> B a a (idp a)) -> (a a' : A) (p : a = a') -> B a a' p
J A B d a a' p =
    transport ((x : A) * a = x) (\e -> B a (proj1 e) (proj2 e)) (a, idp a) (a', p) (contrPathSpace A a a' p) (d a)
-}

Jx : (A : Type) (B : (a a' : A) -> a = a' | A -> Type) -> (a a' : A) (p : a = a' | A) -> B a a (idp a) = B a a' p | Type
Jx A B a a' p = idp (B a) <*> p <*> idp p
                    -- [ B [a] p [p] ]

J : (A : Type) (B : (a a' : A) -> a = a' | A -> Type) -> (a a' : A) (p : a = a' | A) -> B a a (idp a) -> B a a' p
J A B a a' p = coe (Jx A B a a' p)

{-
J0 : (A : Type) (B : (a a' : A) -> a = a' -> Type) (a a' : A) -> (p : a = a')
    -> (\x -> B a a (comp x (inv p))) = B a a' | (a = a' -> Type)
J0 A B a a' p = idp (B a) <*> p

J1 : (A : Type) (B : (a a' : A) -> a = a' -> Type) -> (a a' : A) (p : a = a') -> B a a (comp p (inv p)) = B a a' p
J1 A B a a' p = idp (B a) <*> p <*> idp p

-- J2 : (A : Type) (B : (a a' : A) -> a = a' -> Type) -> (a a' : A) (p : a = a') -> B a a (idp a) = B a a' p
-- J2 A B a a' p = inv (idp (B a) <*> inv p <*> idp p)

-- J3 : (A : Type) (B : (a a' : A) -> a = a' -> Type) -> ((a : A) -> B a a (idp a)) -> (a a' : A) (p : a = a') -> B a a' p
-- J3 A B d a a' p = coe (idp (B a) <*> p <*> idp p) (d a)

-- transport : (A : Type) (B : A -> Type) (a a' : A) -> a = a' -> B a -> B a'
-- transport A (\x -> B -> C) a a' p f = \b -> transport A (\x -> C) a a' p (f (transport A (\x -> B) a' a (inv p) b))
-- transport A (\x -> (b : B) -> C b) a a' p f =
--   \b -> transport A (\x -> C) a a' p (f (transport A (\x -> B) a' a (inv p) b))

depTest1 : (A : Type) (B : A -> Type) (C : (a : A) -> B a -> Type) (a a' : A) -> a = a' ->
    ((b : B a) -> C a b) -> (b : B a') -> C a' b
depTest1 A B C = transport A (\a -> (b : B a) -> C a b)

depTest2 : (A : Type) (B : A -> Type) (C : A -> Type) (a a' : A) -> a = a' -> (B a -> C a) -> B a' -> C a'
depTest2 A B C a a' p f b' =
    let b = transport A B a' a (inv p) b'
    in transport A C a a' p (f b)

depTest3 : (A : Type) (B : A -> Type) (C : (a : A) -> B a -> Type) (a a' : A) -> a = a' ->
    ((b : B a) -> C a b) -> (b' : B a') -> C a' b'
depTest3 A B C a a' p f b' =
    let b = transport A B a' a (inv p) b'
    in transport ((a : A) * B a) (\e -> C (proj1 e) (proj2 e)) (a,b) (a',b') (p,?) (f b)

pmap : {A : Type} {B : A -> Type} (f : (a : A) -> B a) {a a' : A} (p : a = a') -> f a = f a' | B, p

(b = b' | (\a -> C a -> D a), p) => {c : C a} {c' : C a'} -> c = c' | C, p -> b c = b' c' | D, p
(b = b' | (\a -> (c : C a) -> D a c), p) => {c : C a} {c' : C a'} (q : c = c' | C, p) -> b c = b' c' | D, p, q

pmap : f = g | (\x_1 ... x_n -> (a : A) -> B a), p_1, ... p_n
    -> (q : a = a' | (\x_1 ... x_n -> A), p_1, ... p_n) -> f a = f a' | (\x1 ... xn -> B), p_1, ... p_n, q

depmap : (A : Type) (B : A -> Type) (f : (a : A) -> B a) (a a' : A) (p : a = a') -> transport A B a a' p (f a) = f a'
-- depmap A B f = J A (\a a' p -> transport A B a a' p (f a) = f a') (\a -> idp (f a))
depmap A B f = J A (\a a' p -> coe (idp B <*> p) (f a) = f a') (\a -> idp (f a))
-- = [f p]

deppmap : (A : Type) (B : A -> Type) (f g : (a : A) -> B a) -> f = g -> (a a' : A) (p : a = a')
    -> transport A B a a' p (f a) = g a'
deppmap A B f g q a a' p =
    comp (depmap A B f a a' p) (transport ((a : A) -> B a) (\g -> f a' = g a') f g q (idp (f a')))
-- = q <*> p

J'dep : (A : Type) (B : (a a' : A) -> a = a' -> Type0) -> (a a' : A) (p : a = a') -> B a a (comp p (inv p)) = B a a' p
J'dep A B a a' p = deppmap (a = a') (\_ -> Type1) (transport A (\a' -> a = a' -> Type0) a a' p (B a a)) (B a a')
    (depmap A (\a' -> a = a' -> Type0) (B a) a a' p) p p (idp p)
-- = [B (idp a) p] <*> idp p

-- depmap A (\x -> x = x) idp a1 a2 p : transport A (\x -> x = x) a1 a2 p (idp a1) = idp a2

-- depmap : (A : Type) (B : A -> Type) (f : (a : A) -> B a) (a a' : A) (p : a = a') -> f a = f a' | B <$> p

invIdpTest1 : (A : Type) (a a' : A) (p : a = a') -> comp (inv p) p = idp a'
invIdpTest1 A = J A (\a a' p -> comp (inv p) p = idp a') (\a -> idp (idp a))

-- J A (\a a' p -> Id (Id A a' a') (comp (inv p) p) (idp a')) (\a -> idp (idp a))

-- coe ((\a -> Id A a a) <*> p) : Id A a a -> Id A a' a'
-- coe ((\a -> Id A a a) <*> p) x = inv p; x; p

invIdpTest2 : (A : Type) (a a' : A) (p : a = a') -> comp p (inv p) = idp a
invIdpTest2 A = J A (\a a' p -> comp p (inv p) = idp a) (\a -> idp (idp a))

invIdpTest3 : (A : Type) (a a' : A) (p : a = a') -> idp a' = comp (inv p) p
invIdpTest3 A = J A (\a a' p -> idp a' = comp (inv p) p) (\a -> idp (idp a))

invIdpTest4 : (A : Type) (a a' : A) (p : a = a') -> idp a = comp p (inv p)
invIdpTest4 A = J A (\a a' p -> idp a = comp p (inv p)) (\a -> idp (idp a))
-}

depmap'fail : (A : Type) (B : A -> Type) (f : (a : A) -> B a) (a a' : A) (p : a = a' | A) -> transport A B a a' p (f a) = f a' | B a'
depmap'fail A B f a a' p = idp f <*> p
