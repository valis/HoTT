letTest1 : (0 = 0 -> Nat) -> Nat
letTest1 = let x = 0 in \f -> f (idp x)

letTest2 : (0 = 0 -> Nat) -> Nat
letTest2 f = let x = 0 in f (idp x)

-- letTest3 = let x = 0 in \(f : x = x -> Nat) -> f (idp x)

pmapTest1 : 0 = 1 -> (y : Nat -> Nat) -> y 0 = y 1
pmapTest1 p y = pmap y p

pmapTest2 : 0 = 1 -> (y : (Nat -> Nat) -> Nat) -> y (\x -> x) = y (\x -> x)
pmapTest2 p y = pmap y p

pmapTest3 : 0 = 1 -> (y : Nat -> Nat) -> y 0 = y 1
pmapTest3 p y = pmap (\x -> y x) p

pmapTest4 : (g f : Nat -> Nat) -> f = g -> (y : Nat) -> f y = g y
pmapTest4 g f p y = pmap (\x -> x y) p
