letTest1 : (0 = 0 -> Nat) -> Nat
letTest1 = let x = 0 in \f -> f (idp x)

letTest2 : (0 = 0 -> Nat) -> Nat
letTest2 f = let x = 0 in f (idp x)

letTest3 : (let x = 0 in x) = 0
letTest3 = idp 0

letTest4 : (x : Type0) -> x -> x
letTest4 x = \y -> y

letTest5 : (x : Type0) -> x -> x
letTest5 x y = let x = 0 in y

letTest6 : (x : Type0) -> x -> ((x -> x) -> x) -> x
letTest6 x y f = f (let x = 0 in \z -> y)

letTest7'fail : (x : Type0) -> x -> ((x -> x) -> x) -> x
letTest7'fail x y f = f (let x = 0 in \z -> x)

typeTest1 = 0 = 1 -> (y : Nat -> Nat) -> y 0 = y 1

pmapTest1 : 0 = 1 -> (y' : Nat -> Nat) -> y' 0 = y' 1
pmapTest1 p y = pmap y p

pmapTest1' : typeTest1
pmapTest1' p y = pmap y p

pmapTest2'fail : 0 = 1 -> (y : (Nat -> Nat) -> Nat) -> y (\x -> x) = y (\x -> x)
pmapTest2'fail p y = pmap y p

pmapTest3 : 0 = 1 -> (y : Nat -> Nat) -> y 0 = y 1
pmapTest3 p y = pmap (\x -> y x) p

pmapTest4 : (g f : Nat -> Nat) -> f = g -> (y : Nat) -> f y = g y
pmapTest4 g f p y = pmap (\x -> x y) p
