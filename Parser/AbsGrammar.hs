module Parser.AbsGrammar where

-- Haskell module generated by the BNF converter


newtype U = U String deriving (Eq,Ord,Show)
newtype PIdent = PIdent ((Int,Int),String) deriving (Eq,Ord,Show)
data Defs =
   Defs [Def]
  deriving (Eq,Ord,Show)

data Def =
   Def PIdent [Arg] Expr
 | DefType PIdent Expr
  deriving (Eq,Ord,Show)

data Expr =
   Let [Def] Expr
 | Lam [Binder] Expr
 | Arr Expr Expr
 | Pi [TypedVar] Expr
 | Prod Expr Expr
 | Sigma [TypedVar] Expr
 | Id Expr Expr
 | App Expr Expr
 | Var Arg
 | Nat
 | Suc
 | Rec
 | Idp
 | Pmap Expr
 | NatConst Integer
 | Universe U
  deriving (Eq,Ord,Show)

data Arg =
   Arg PIdent
 | NoArg
  deriving (Eq,Ord,Show)

data Binder =
   Binder Arg
  deriving (Eq,Ord,Show)

data TypedVar =
   TypedVar Expr Expr
  deriving (Eq,Ord,Show)

